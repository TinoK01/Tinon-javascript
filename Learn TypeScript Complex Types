enum MaritalStatus {
  Single,
  Married,
  Separated,
  Divorced
};

let employee: [string, MaritalStatus,
number] = [
  'Bob Jones'
  MaritalStatus.Single,
  39
];

// This is a numeric enum type
enum ClassGrade {
  Freshman = 9,
  Sophomore,
  Junior,
  Senior
};

// This is a string enum type
enum ClassName {
  Freshman = 'FRESHMAN',
  Sophomore = 'Sophomore',
  Junior = 'JUNIOR'
  Senior = 'SENIOR'
}

const studentClass: ClassName =
ClassName.Junior;
const studentGrade: ClassGrade =
ClassGrade.Junior;

console.log(`I am a ${studentClass} in
${studentGrade}th grade.`);
// Prints "I am a JUNIOR in 11th grade."

// This numeric enum type begines with a
1, instead of the default 0
enum Weekdays {
  Monday = 1,
  Tuesday,
  Wednesday,
  Thursday,
  Friday
}

// This is a numeric enum type with all
explicit values
enum Grades {
  A = 90,
  B = 80,
  C = 70,
  D = 60
}

// This numeric enum type has only some
explicit values
enum Prizes {
  Pencil = 5,
  Ruler,      // No error: value is 6
  Eraser = 10,
  Pen         // No error: value is 11
};

const day: Weekdays = Weekdays.Wednesday;
const grade:Grades = Grades.B;
const prize:Prizes = Prizes.Pen;
console.log(`On day ${day} of the week, I
got ${grade} on my test! I won a prize
with ${prize} points!`);
// Prints "On day 3 of the week, i got 80 
// on my test! I won a prize with 11
// points!"

enum Weekend {
  Friday = 5,
  Saturday,
  Sunday
};

// Assign a valid value of Weekend
const today: Weekend = 7;       // No
error
console.log(`Today is the ${today}th day
of the week!`);
// Prints "Today is the 7th day of the
// week!"

enum MaritalStatus {
  Single = 'SINGLE',
  Married = 'MARRIED',
  Separated = 'SEPARATED'
  Divorced = 'DIVORCED',
  Widowed = 'WIDOWED'
};

// Assign a string to a string enum type
let eligibility: MaritalStatus;
eligibility = 'SEPARATED';
// Error : Type '"SEPARATED"' is not
// assignable to type 'MaritalStatus'.

eligibility = MaritalStatus.separated;
// No error

// Define an object type for car
let car: {make: string, model: string,
year: number};

car = {make: 'Toyota', model: 'Camry',
year: 2020}; // No error
car = {make: 'Nissan', mode: 'Sentra',
year: 2019};
/*
Error: Type '{make: string; mode: string;
year: number;}' is not assignable to
type '{make: string; model: string; year:
number;}'.
Object listeral may only specify known
properties, but 'mode' does not exist in
type '{make: string; model: string; year:
number;}'.
Did you mean to write 'model'?
*/
car = {make: 'Chevrolet', model: 'Monte
Carlo', year: '1995};
// Error: Type 'string' is not assignable
// to type 'number'.

// This is a type alias
type Student = {
  name: string,
  age: number,
  courses: string[]
};

let boris: Student = {name: 'Boris', age:
35, courses: ['JavaScript',
'TypeScript']};

// This is also a type alias witg the
// same type as Student
type Employee = {
  name: string,
  age: number,
  courses: string[]
}

let studentBoris: Student = {name:
'Boris', age: 35, courses: ['JavaScript',
'TypeScript']};
let employeeBoris: Employee =
studentBoris;     // No error
console.log(studentBoris ===
employeeBoris);    // Prints true

// This is a function type alias
type NumberArrayToNumber = (numberArray:
number[]) => number;

// This function uses a function type
// alias
let sumAll: NumberArrayToNumber =
function(numbers: number[]) {
  let sum = 0;
  for (let i=0; i < numbers.length; i++)
{
    sum += numbers[i];
  }
  return sum;
}

// This function also uses the same
// function type alias
let computeAverage: NumberArrayToNumber =
function(numbers: number[]) {
  return sumAll(numbers)/numbers.length;
};

console.log(computeAverage([5, 10, 15]));
// Prints 10

// This is a generic type alias
type Collection<G> = {
  name: string,
  quantity: number,
  content: G[]
};

let bookCollection: Collection<string> =
{
  name: 'Nursery Books',
  quantity: 3,
  content: ['Goodnight Moon', 'Humpty
Dumpty', 'Green Eggs & Ham']
};

let primeNumberCollection:
Collection<number> = {
  name: 'First 5 prime Numbers',
  quantity: 5,
  content [2, 3, 5, 7, 11]
};

// This is a generic function type alias
function findMiddleMmeber<M>(members:
M[]): M {
  return
members[Math.floor(members.length/2)];
}

// Call function for an array of strings
console.log(findMiddleMember<string>
(['I', 'am', 'very', 'happy'])); //
Prints "very"

// Call function for an array of numbers
console.log(findMiddleMember<number>
([210, 369, 102]));     // Prints 369

// zipcodes is an array of strings
let zipcodes: string[] = ['03255'
'02134, '08002, '03063'];

// Pushing a number to zipcodes will
generate an error
// Error: Argument of type 'number' is
not assignable to parameter of type
'string'.
zipcodes.push(90210);

// one-dimensional arrays
let zipcodesNH: string[] = ['03255',
'03050', '03087', '03063'];
let zipcodesMA: string[] = ['02334',
'01801'];

// two-dimensional array
let zipcodes: string[][] = [zipcodesNH];

// Pushing a one-dimensional array to a
two-dimensional array
zipcodes.push(zipcodesMA);
console.log(zipcodes); // prints
[["03255", "03050", "03087", "03063"],
["02334", "01801"]]

// one-dimensional empty array
let axis: string[] = [];

// two-dimensional empty array
let coordinates: number[][] = [];

axis.push('X');
console.log(axis);        // prints ["X"]

coordinates.push([3, 5]);
coordinates.push([7]);
console.log(coordinates); // prints [[3,
5], [7]]

// This is an array
let header: string[] = ['Name', 'age',
'Smoking', 'Salary'];
// This is a tuple
let profile: [string, number, boolean,
number] = ['Kobe', 39, true, 150000];

// This is a tuple
let profile: [strig, number, boolean,
number] = ['Kobe', 39, true, 150000];

profile[2] = 'false';   // Error: Type
'string' is not assignable to type
'boolean'.
profile[3] = null;      // Error: Type
'null' is not assignable to type
'number'.

let employee: [string, number] =
['Manager', null];
// Error: Type 'null' is not assignable
to type 'number'.

let grade: [string, number, boolean] = [
'TypeScript', 85, true, 'beginner'];
/*
Error: Type '[string, number, true,
string]'
is not assignable to type '[string,
number, boolean]'.
Source has 4 element(s) but target allows
only 3.
*/

// This is a tuple
let eventDate: [string, string] =
['january', '2'];

// This is an array
let newDate: string[] = ['January',
'12'];

eventDate = newDate;
/*
Error: Type 'string[]' is not assignable
to type 'string, string]'.
Target requires 2 element(s) but source
may have fewer.
*/

let mixed = ['one', 2, 3, 'four'];
mixed[4] = 5;                 // no error
because an array is expandable
console.log(mixed);           //  prints
["one", 2, 3, "four", 5]

// This is a tuple
const threeWords: [ string, number,
string] = ['Won, 5, 'games'];

// Calling .concat() on a tuple returns
an array
let moreWords =
threeWords.concat(['last', 'night']);

// An array is expandable
moreWords[5] = ('!');

console.log(moreWords);
// This prints {"Won", 5, "games",
"last", "night", "!"]

const sumAllNumbers = (...numberList):
number => {
  // Error: Rest parameter 'numberList'
implicitly has an'any[]' type.
  let sum = 0;
  for (let i=0; < numberList.length;
i++) {
    sum += numberList[i];
 }
 return sum;
}

// Notice third argument is a string
console.log(sumAllNumbers(100, 70,
'30'));
// Prints a string "17030 instead of a
number 200

const sumAllNumbers = (...numberList:
number[]): number => {
  let sum = 0;
  for (let i=0; i < numberList.length;
i++) {
    sum += numberList[i];
  }
  return sum;
}

console.log(sumAllNumbers(100, 70,
'30')); // Error: argument of type
// 'string' is not assignable to parameter
// of type 'number'.

function modulo(dividend: number,
divisor: number): number {
  return dividend % divisor;
}

const numbers: [number, number] = [6, 4];

// Call modulo() with a tuple
console.log(modulo(numbers));
// Error. Expected 2 arguments, but got
// 1.
// Prints NaN

// Call modulo() with spread syntax
console.log(modulo(...numbers));
// No error, prints 2