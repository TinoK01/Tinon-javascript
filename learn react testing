it('test description', () => {
  // testing logic and assertions go
here...
}, timeout)

it('tests async code: callbacks',
(done)=>{
  //act
  async(input, response => {
    //assertions
    try {
      expect(response).toBeDefined();
      done();
    } catch (error) {
      done(error);
    }
 });
}

it('tests promises', async () => {
  //arrange
  const expectedValue = 'data';
  // act
  const actualvalue = await
asyncFunc(input);
  //assertions

expect(actualValue).toBe(expectedValue);
});

const mockFunction = jest.fn(() => {
  return 'hello';
});
expect(mockFunction()).toBe('hello');

mockFunction.mockReturnValueOnce('goodbye'
');

expect(mockFunction()).toBe('goodbye');
expect(mockFunction()).toBe('hello');
expect(mockFunction).toHaveBeenCalledTime
s(3);

// ../utils/utilities.js
export const someUtil = jestfn(() =>
'goodbye');

// myTest.test.js
import { someUtil } from
'./utils/utilities';
jest.mock('./utils/utilities');

it('uses a mock function', () => {
  expect(someUtil()).toBe('goodbye');
});

import { render, screen } from '@testing-library/react'

const Goodbye = () => {
  return <h1>Bye Everyone</h1>
};

it('should print the Goodbye component',
() => {
  render(<Goodbye/>);
  screen.debug();
});

// Output:
// <body>
//   <div>
//     <h1>
//       Bye Everyone
//     </h1>
//   </div>
// </body>

import { render, screen } from '@testing-library/react';

const Button = () => {
  return <button type="submit">Click
Me</button>
};

// The button node can be extracted via its text content with screen.getByText()
it('Extract button node with getByTest',
() => {
  render(<button/>);
  const button = screen.getByText('Click
Me');
});

// The same button node can also be extracted with screen.getByRole()
it('Extract button node with getByRole',
() => {
  render(<Button/>);
  const button =
screen.getByRole('button');
});

import { render } from '@testing-
library/react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';

const GreetungForm = () => {
  return(
    <form>
       <label role="textbox"
htmlFor="greeting">
        Greeting:
     </label>
     <input type="text" id="greeting" />
     <button
type="submit">Submit</button>
    </form>
  );
};

it('should show text content as Hello!',
() => {
  render(<GreetingForm) />);
  const textbox =
screen.getByRole('textbox');
  const button =
screen.getByRole('button');

  // Simulate typing 'Hello!'
  userEvent.type(textbox, 'Hello!');
  // Simulate clicking button
  userEvent.click(button);

  // Assert textbox has text content 'Hello!'
  expect(textbox).toHaveValue('Hello!');
});

import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';

const App 0 () => {
  // Removes header
  const handleClick = () => {

document-querySelector('h1').remove();
  };

  return (
    <div>
       <h1>Goodbye!</h1>
       <button onClick=
{handleClick}>Remove Header</button>
    </div>
  )
};

it('Should show null', () =>  {
  // Render App
  render(<App />);
  // Extract button node
  const button =
screen.getByRole('button');
  // Simulate clicking button
  useEvent.click(button);
  // Attempt to extract the header node
  const header =
screen.queryByText('Goodbye!');
  // Assert null as we have removed the
header
  expect(header).tobeNull();
});

import { useState, useEffect } from
'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';

const Header = () => {
  const [text, setText] = useState('Hello World!');

  // Changes header text after interval of 500ms
  useEffect(() => {
    setTimeout(() => {
      settext('Goodbye!');
    }, 500);
  });

  return <h1>{text}</h1>;
};

it('should show text content as Goodbye',
async () => {
  // Render App
  render(<header />);
  // Asyncchronously extract header with new text
  const header = await
screen.findByText('Goodbye!');
  // Assert header to have text 'Goodbye!'
  expect(header).toBeInTheDocument();
});

import {render} from '@testing-
library/react';
import '@testing-library/react';
import '@testing-library/jest-dom';

const Header = () => {
  return <h1 className='title'>I am a header</h1>
};

it('should show the button as disabled',
() => {
  // render Button component
  render(<header />);
  // Extract header
  const header =
screen.getByRole('heading');
  // Use jest-do assertions
  expect(header).toBeInTheDocument();
  expect(header).toHaveTextContent('I am
a header');
  expect(header).toHaveClass('title');
});

import { waitFor, render, screen } from
'@testing-library/react';
import '@testing-library/jest-dom';
import userEvent from '@testing-
library/user-event';

const Header = () => {
  // Remove the heading after 250ms
  useEffect(() => {
    setTimeout(() => {

document.querySelector('h1').remove()
    }, 250);
  });

  return (
    <div>
       <h1>Hey Everybody</h1>
    </div>
  );
};

it('should remove header display', async
() => {
  // Render Header
  render(<header/>)
  // Wait for the element to be removed
asynchronously
  await waitfor(() => {
    const heading =
screen.queryByText('Hey Everybody');
    expect(heading).toBeNull()
  })
});

it('Button component is accessible', ()
=> {
  render(<Button />);

  const button =
screen.getByRole('button');
  expect(button).toHaveTextContent('Click me');
});

// app.test.js
import {
  render,
  screen,
  waitFor
} from '@testing-library/react';