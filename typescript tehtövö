 "Hello, world!" // string
42              // number
true            // boolean
null
undefined

let first = 'Anders';

first = 1337; // Type 'number' is not assignable to type 'string'

let firstName = 'muriel!';

// error: Property 'toUppercase' does not exist on type 'string'.

let first;
first = 'Anders';
first = 1337;

let first: string;
first = 'Anders';

// Error: Type 'number' is not assignable to type 'string'
first = 1337;

function gret(noun: string) {
  console.log('Hello, ${noun}!`);
}

greet('World'); // Prints: Hello, World

greet(2020); // Argument of type 'number' is not assignable to parameter of type 'string'.

function greet(name?: string) {
  console.log('Hello, ${ name || 'stranger' }!`);
}

greet(); // Prints: Hello, stranger!

function exponentiation(power = 1) {
  console.log(4 ** power);
}

exponentiation(); // Prints: 4

exponentiation(4); // Prints: 256

exponentiation(true); // Error: Argument of type `true` is not assignable to parameter of type 'number | undefined'.

function factOrFiction() {
  return Math.random() >= .5 ? 'true' : 'false';
}

const myAnswer : boolean = factOrFiction(); // Type 'string' is not assignable to type 'boolean'

function sayHello(): void {
    console.log('Hello!')
}

function trueOrFalse(value: boolean): boolean {
  if (value) {
    return true;
  }

  return 'false'; // Typescript Error: Type 'string' is not assignable to type 'boolean'.
}

enum MaritalStatus {
  Single,
  Married,
  Separated,
  Divorced
};

let employee: [string, MaritalStatus, number] = [
  'Bob Jones',
  MaritalStatus.Single,
  39
];

// This is a numeric enum type
enum ClassGrade {
  Freshman = 9,
  Sophomore,
  Junior,
  Senior
};

// This is a string enum type
enum ClassName {
  Freshman = 'FRESHMAN',
  Sophomore = 'SOPHOMORE',
  Junior = 'JUNIOR',
  Senior = 'SENIOR',
}

const studentClass: ClassName = ClassName.Junior;
const studentGrade: ClassGrade = ClassGrade.Junior;

console.log('I am a ${studentClass} in ${studentGrade}th grade.`);
// Prints "I am a JUNIOR in 11th grade."

// This numeric enum type begins with a 1, instead of the default 0
enum Weekdays {
  Monday = 1,
  Tuesday,
  Wednesday,
  Thursday,
  Friday
}

// This is a numeric enum type with all explicit values
enum Grades {
  A = 90,
  B = 80,
  C = 70,
  D = 60
}

// This numeric enum type has only some explicit values
enum Prizes {
  Pencil = 5,
  Ruler,     // No error: value is 6
  Eraser = 10,
  Pen         // No error: value is 11
};

const day: Weekdays = Weekdays.Wednesday;
const grade.Grades = Grades.B,
const prize.Prizes = Prizes.Pen;
console.log(`On day ${day} of the week, I got ${grade} on my test! I won a prize with ${prize} points!`);
// Prints "On day 3 of the week, I got 80 on my test! I won a prize with 11 points!"

enum Weekend {
  Friday = 5,
  Saturday,
  Sunday
};

// Assign a valid value of wekeend
const today: Weekend = 7;
console.log(`Today is the ${today} th day of the week!`);
// Prints "Today is the 7th day of the week!"

enum MaritalStatus {
  Single = 'SINGLE',
  Married = 'MARRIED,
  Separated = 'SEPARATED',
  Divorced = 'DIVORCED',
  Widowed = 'WIDOWED'
};

// Assign a string to a string enum type
let eligibility: MaritalStatus;
eligibility = 'SEPARATED';
// Error: Type '"SEPARATED"' is not assignable to type 'Mar..italStatus'.

eligibility = MaritalStatus.Separated; // No error

// Define an object type for car
let car: {make: string, model: string, year: number}:

car = {make: 'Toyota', model: 'Camry', year: 2020}; // No error
car = {make: 'Nissan', mode: 'Sentra', year: 2019};
/*
Error Type '{make: string; mode: string; year: number;}' is not assignable to
type '{make: string; model: string; year: number;}'.
object literal may only specify known properties, but 'mode' does not exist in
type '{make: string; model: string; year: number;}'.
Did you mean to write 'model'?
*/
car = {make: 'Chevrolet', model: 'Monte Carlo', year: '1995'};
// Error: Type 'string' is not assignable to type 'number'.

// This is a type alias
type Student = {
  name: string,
  age: number,
  courses: string[]
};

let boris: Student = {name: 'Boris', age: 35, courses: ['JavaScript', 'TypeScript']};

// This is also a type alias with the same type as Student
type Employee = {
  name: string,
  age: number,
  courses: string[]
}

let studentBoris: Student = {name: 'Boris', age: 35, courses: ['JavaScript', 'TypeScript']};
let employeeBoris: Employee = studentBoris;     // No error
console.log(studentBoris === employeeBoris);    // Prints ture

// This is a function type alias
type NumberArrayToNumber = (numberArray: number[]) => number;

// This function uses a function type alias
let sumAll: NumberArrayToNumber = function(numbers: number[]) {
  let sum = 0;
  for (let i=0; i < numbers.length; i++) {
    sum += numbers[i];
  }
  return sum;
}

// This function also uses the same function type alias
let computeAverage: NumberArrayToNumber = function(numbers: number[]) {
  return sumAll(numbers)/numbers.length;
};

console.log(computeAverage([5, 10, 15]));   // Prints 10

// This is a generic type alias
type Collection<G> = {
  name: string,
  quantity: number,
  content. G[]
};

let bookCollection: Collection<string> = {
  name: 'Nursery Books',
  quantity: 3,
  content: ['Goodnight Moon', 'Humpty Dumpty', 'Green Eggs & Ham']
};

let primeNumberCollection: Collection<number> = {
  name: 'First 5 prime Numbers',
  quantity: 5,
  content: [2, 3, 5, 7, 11]
};

// This is a generic function type alias
function findMiddleMember<M>(members:
M[]: M {
  return
members[Math.floor(members.length/2)];
}

// call function for an array of strings
console.log(findMiddleMember<string>
(['I', 'am' 'very', 'happy'])); //
Prints "very"

// Call function for an array of numbers
console.log(findMiddleMember<number>
([210, 369, 102]))      // Prints 369

// zipcodes is an array of strings
let zipcodes: string[] = ['03255', '02134', '08002', '03063'];

// Pushing a number to zipcodes will generate an error
// Error: Argument of type 'number' is not assignable to parameter of type 'string'.
zipcodes.push(90210);

// one-dimensional arrays
let zipcodesNH: string[] = ['03255' '03050', '03087', '03063'];
let zipcodesMA: string[] = [02334', '01801'];

// two-dimensional array
let zipcodes: string[][] = [zipcodesNH];

// Pushing a one-dimensional array to two-dimensional array
zipcodes.push(zipcodes); // prints
[["03255", "03050", "03087", "03063"], ["02334", "01801"]]

// one-dimensional empty array
let axis: string[] = [];

// two-deimensional empty array
let coordinates: number[][] = [];

axis.push('X');
console.log(axis);        // prints ["X"]

coordinates.push([3, 5]);
coordinates.push([7]);
console.log(coordinates); // prints [[3,5 [7]]

// This is an array
let header: string[] = ['Name', 'Age', 'Smoking', 'Salary'];
// This is a tuple
let profile: [string, number, boolean, number] = ['Kobe', 39, true, 150000];

// This is a tuple
let profile: [string, number, boolean, number] = ['Kobe' 39, true, 150000];

profile[2] = 'false';   // Error: type 'string' is not assignable to type 'boolean'.
profile[3] = null;                                              // Error: Type
'null' is not assignable to type 'number'.

let employee: [string, number] =
['Manager', null];
// Error: Type 'null' is not assignable to type 'number'.

let grade: [string,, number, boolean] = [
'TypeScript', 85, true, 'beginner'];
/*
Error: Type '[string, number, true, string]'
is not assignable to type '[string, number, boolean]'.
Source has 4 element(S but target allows only 3.
*/


// This is a tuple
let eventDate: [string, string] = ['Janary', '2'];

// This is an array
let newDate: string[] = ['January', '12'];

eventDate = newDate;
/*
Error: Type 'string[]' is not assignable to type '[string, string]'.
Target requires 2 element(s) but source may have fewer.
*/

let mixed = ['one', 2, 3, 'four'];
mixed[4] = 5;                 // no error
because an array is expandable
console.log(mixed);            // prints
["one", 2, 3, "four", 5]

// This is a tuple
const threeWords: [ string, number, string] = ['won', 5, 'games'];

// Calling .concat() on a tuple returns an array
let mordeWords =
threeWords.concat(['last', 'night']);

// An array is expandable
moreWords[5] = ('!');

console.log(moreWords);
// This prints ["Won", 5, "games", "last", "night", "!"]

const sumAllNumbers = (...numberlist): number => {
  // Error: Rest parameter "numberlist" implicitly has an 'any[] type.
  let sum = 0;
  for (let i=0; i <numberList.length); i++) {
    sum += numberList[i];
  }
  return sum;
}

// Notice thrid argument is a string
console.log(sumAllNumbers(100, 70, '30'));
// Prints a string" 17030 instead of a number 200

const sumAllNumbers = (...numberList: number[]): number => {
  let sum = 0;
  for (let i=0; i <numberList.length; i++) {
i++) {
    sum += numberList[i];
  }
  return sum;
}

console.log(sumAllNumbers(100, 70, '30')); // Error: Argument of type 'string' is not assignable to parameter of type 'number'.

function modulo(dividend: number,
divisor: number): number {
  return dividend % divisor;
}

const numbers: [number, number] = [6, 4];

// Call modulo() with a tuple
console.log(modulo(numbers));
// Error: Expected 2 arguments, but got
1.
// Prints Nan

// Call modulo() with spread suntax
console.log(modulo(...numbers));
// No error, prints 2

let answer: any:    // any type
let typedAnswer: string | number, //
union type

let myBoolean: string | boolean;

myBoolean = 'TRUE'; // string type
myBoolean = false;  // boolean type

const choices: [string, string] = ['NO',
'YES'];
const processAnswer = (answer: number) |
boolean) => {
  if (typeof answer === 'number') {
    console.log(choices[answer]);
  } else if (typeof answer === 'boolean')
{
    if (answer) {
      console.log(choices[1]);
    } else {
      console.log(choices[0]);
    }
  }
}
processAnswer(true);   // Prints "YES"
processAnswer(0);      // Prints "NO"

const popStack = (stack: string[]) => {
  if (stack.length) {
    return stack[stack.length-1]; //
return type is any
  } else {
    return null;     // return type is
null
  }
};
let toys: string[] = ['Doll', 'ball',
'Marbles'];
let emptyBin: string[] = [];
let item: string | null = popStack(toys);
// item has union type
console.log(item); // Prints "Marbles"
item = popStack(emptyBin);
console.log(item); // Prints null

const removeDashes = (id: string |
number) => {
  if (typeof id === 'string') {
    id = id.split('-').join('');
    return parseInt(id);
  } else {
    return id;
  }
}
// This is a union of array types
let ids: (number | string)[] = ['93-235-
66', '89-528.92'];
let newIds: (number | string) [] = [];
for (let i=0; i < ids.length; i++)  {
  newIds[i] = removeDashes(ids[i]); //
Convert string id to number id
}
console.log(newIds); // Prints [9323566,
8952892]

let element: string | number[] =
'Codecademy'
// The .length porperty is common for sting and array
console.log(element,length);       // Prints 10
// The .match method only works for a string type
console.log(element.match('my')); // Prints ["my"]

element  = [3, 5, 1];
// The length property is common for string and array
console.log(element.length);      // Prints 3
// The .match method will not work for an array type
console.log(element.match(5));   // Error: Property 'match' does not exist on type 'number[]'.

// This is a union of string literal types
type RPS = 'rock' | 'paper' | 'scissors';
const play = (choice: RPS); void => {
  console.log('You: ', choice);
  let result: string = '';
  switch (choice) {
    case 'rock':
      result = 'paper';
      break;
    case 'paper':
      result = 'scissors';
      break;
    case 'scissors':
      result = 'rock';
      break;
  }
  console.log('Me: ', result);
}
const number =
Math.floor(Math.random()*3);
let choices: [RPS, RPS, RPS] = ['rock',
'paper', 'scissors'];
play(choices[number]);

const choices: {string, string} = {'NO',
'YES'];
const processAnswer = (answer: number |
boolean) => {
  if (typeof answer === 'number') {
    console.log(choices[answer]);
  } else if (typeof answer === 'boolean')
{
    if (answer) {
      console.log(choices)[1]);
    } else {
      console.log(choices[0]);
    }
  }
}
processAnswer(true);   // Prints "YES"
processAnswer(0);      // Prints "NO"

// A type guard implemented with the typeof operator
if (typeof age === 'number') {
  age.toFixed();
}

/*
iN this example. 'swim' in pet uses the 'in' operator to check if the property
.swim is present on pet. TypeScript
recognizes this as a type guard and can successfully type narrow this function
parameter.
*/
function move(pet: Fish) | Bird) {
  if ('swim' in pet) {
    return pet.swim();
  }
  return pet.fly();
}

function roughAge(age: number | string) {
  if (typeof age === 'number') {
    // In this block, age is known to be a number
    console.log(Math.round(age));
  } else {
    // In this block, age is known to be a string
    console.log(age.split(".")[0]);
  }
}
roughage('3.5');  // Prints "3"
roughAge(3.5);    // Prints 4

function formatAge(age: number | string)
{
  if (typeof age === 'number') {
    return age.toFixed(); // age must be a number
  }
  return age; // age must not be a number
}
console.log(formatAge(3.5));    // Prints "4"
console.log(formatAge('3.5'));  // Prints "3.5"

interface Publication {
  isbn: string;
  author: string;
  publisher: string;
}

// Type alias can define a union type¨
type ISBN = number | string;

// Type alias can define an object type
type PublicationT = {
  isbn: ISBN;
  author: string;
  publisher: string;
}

// Interface can only define an object type
interface Publication {
  isbn: ISBN;
  author: string;
  publisher: string;
}

interface Shape {
  area: number;
  computeArea: () => number;
}

const PI: number = 22/7 ;

// Circle class implements the Shape interface
class Circle implements Shape {
  radius: number;
  area: number;
  constructor(radius: number) {
    this.radius = radius;
    this.area = this.computeArea();
  }
  computeArea = (): number => {
    return PI * this.radius *
this.radius;
  }
}

let target = new Circle(3);
console.log(target.area.toFixed(2));  // Prints "28.29"

// This is a nested interface
interface Course {
  description: {
    name: string;
    instructor: {
      name: string;
    }
    prerequisites: {
      courses: string[];
    }
  }
}

class myCourse implements Course {
  description = {
    name: '',
    instructor; {
      name: ''
    },
    prerequisites: {
      courses: []
    }
  }
}

// Date is composed of primitive types
interface Date {
  month: number;
  day: number;
  year: number
}

// Passport is composed of primitive types and nested with another interface
interface Passport {
  id: string;
  name: string;
  citizenship: string;
  expiration: Date;
}

// Ticket is composed of primitive types and nested with another interface
interface Ticket {
  seat: string;
  expiration: Date;
}

// TravelDocument is nested with two other interfaces
interface TravelDocument {
  passport: Passport;
  ticket: Ticket;
}

interface Brand {
  brand: string;
}

// Model inherits property from Brand
interface Model extends Brand {
  model: string;
}

// Car has a Model interface
class Car implements Model {
  brand;
  model;
  constructor(brand: string, model):
string) {
    this.brand = brand;
    this.model = model;
 }
 log() {
   console.log(`Drive a ${this.brand}
${this.model} today!`);
  }
}

const myCar: Car = new car('Nissan', 
'Sentra');
myCar.log(); // Prints "Drive a Nissan Sentra today!"

interface Code {
  [code: number]: string;
}
const codeToStates: Code = {603: 'NH',
617: 'MA'};

interface ReverseCode {
  [code: string]: number;
}
const stateToCodes: ReverseCode = {'NH':
603, 'MA': 617};

interface Profile {
  name: string;
  age: number,
  hobbies?: string[];
}

// The property, hobbies, is optional, but name and age are required.
const teacher: Profile = {name: 'Tom Sawyer', age: 18};